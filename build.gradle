apply plugin: 'c'
apply plugin: 'cpp'
apply plugin : 'java'

//TODO : Clean old folders

task copyToCDistribution(type: Copy) {
  def d = new File('dist/c/')
  d.mkdirs()

  from './src/crc16/c/','./src/crc16/headers/','./src/framing/c/',
  './src/framing/headers/','./src/telemetry/c/', './src/telemetry/headers/',
  './drivers/c/base/','./interfaces/c/','./version/','./configs/c/'
  into './dist/c/'
  include '**.c','**.h'
}

task copyToCppDistribution(type: Copy) {
  def d = new File('dist/cpp/c_api/')
  d.mkdirs()

  from '/src/crc16/c/','/src/crc16/headers/','/src/framing/c/',
  '/src/framing/headers/','/src/telemetry/c/', '/src/telemetry/headers/',
  './version/','./configs/cpp/'
  into 'dist/cpp/c_api/'
  include '**.c','**.h'
}

task copyToMbedDistribution(type: Copy) {
  def d = new File('dist/mbed/c_api/')
  d.mkdirs()

  from '/src/crc16/c/','/src/crc16/headers/','/src/framing/c/',
  '/src/framing/headers/','/src/telemetry/c/', '/src/telemetry/headers/',
  './version/'
  into 'dist/mbed/c_api/'
  rename { String fileName ->
        fileName.replace('.c', '.cpp')
    }
  include '**.c','**.h'
}

task copyToArduinoDistribution(type: Copy) {
  def d = new File('dist/arduino/')
  d.mkdirs()

  from '/src/crc16/c/','/src/crc16/headers/','/src/framing/c/',
  '/src/framing/headers/','/src/telemetry/c/', '/src/telemetry/headers/',
  './version/','./configs/arduino/'
  into 'dist/arduino/'
  rename { String fileName ->
        fileName.replace('.c', '.cpp')
    }
  include '**.c','**.h'
}

task copyCppInterfaceAndDriver(type: Copy) {
  from '/interfaces/cpp/','/drivers/cpp/base/'
  into 'dist/cpp/'
  include '**.c','**.h','**.cpp','**.hpp'
}

task copyMbedInterfaceAndDriver(type: Copy) {
  from '/interfaces/cpp/','/drivers/cpp/mbed/','./configs/mbed/'
  into 'dist/mbed/'
  include '**.c','**.h','**.cpp','**.hpp'
}

task copyArduinoInterfaceAndDriver(type: Copy) {
  from '/interfaces/cpp/','/drivers/cpp/arduino/'
  into 'dist/arduino/'
  rename { String fileName ->
        fileName.replace('Telemetry.hpp', 'Telemetry.h')
    }
  include '**.c','**.h','**.cpp','**.hpp'
}

// Moves the generated test vector to the appropriate folder for tests
// testVectorsGenerator generator must be build and executed first for the
// file to be generated
// TODO : Add both things as a dependency
task moveTestVectorMbed(type: Copy) {
  from '/build/install/testVectorsGenerator/debug/'
  into '/build/install/mbedTest/debug/'
  include 'valid_vectors.csv'
}

// Moves the generated test vector to the appropriate folder for tests
// testVectorsGenerator generator must be build and executed first for the
// file to be generated
// TODO : Add both things as a dependency
task moveTestVectorArduino(type: Copy) {
  from '/build/install/testVectorsGenerator/debug/'
  into '/build/install/arduinoTest/debug/'
  include 'valid_vectors.csv'
}

// Generates the C dsitribution, untied to hardware
// Copies files from src/ folders into dist/c folder
// Copies driverBase.h file into dist/c
task distributeC() {
  dependsOn << copyToCDistribution
}

// Generates the C++ distribution, untied to hardware
// Copies files from src/ folders into dist/cpp folder
// Copies driverBase.h file into dist/cpp
// Copies interface/cpp/* into dist/cpp

task distributeCpp() {
  dependsOn << copyToCppDistribution
  dependsOn << copyCppInterfaceAndDriver
}

// Generates the Mbed distribution
// Copies files from src/ folders into dist/cpp folder
// Copies driverMbed.h file into dist/cpp
// Copies interface/cpp/* into dist/cpp

task distributeMbed() {
  dependsOn << copyToMbedDistribution
  dependsOn << copyMbedInterfaceAndDriver
}

//TODO : add version to the zip
task packMbed(type: Zip){
  dependsOn << distributeMbed
  from './dist/mbed/'
  into './Telemetry/'
  archiveName 'Telemetry-mbed.zip'
}


// Generates the Arduino distribution
// Copies files from src/ folders into dist/cpp folder
// Copies driverMbed.h file into dist/cpp
// Copies interface/cpp/* into dist/cpp

task distributeArduino() {
  dependsOn << copyToArduinoDistribution
  dependsOn << copyArduinoInterfaceAndDriver
}

//TODO : add version to the zip
task packArduino(type: Zip){
  dependsOn << distributeArduino
  from './dist/arduino/'
  into './Telemetry/'
  archiveName 'Telemetry-arduino.zip'
}

clean.doFirst {
    delete "${rootDir}/dist/"
    println "${rootDir}/dist/"
}

model {
  buildTypes {
      debug
      release
  }

  toolChains {
    gcc(Gcc) {

    }
  }

  components {
    crc16(NativeLibrarySpec){

    }
    framing(NativeLibrarySpec) {

    }
    telemetry(NativeLibrarySpec) {
      binaries.all {
        lib library: "crc16"
        lib library: "framing"
      }
    }
    tests(NativeExecutableSpec) {
       binaries.all {
         lib library: "telemetry"
         lib library: "crc16"
         lib library: "framing"
       }
     }

     crc16pp(NativeLibrarySpec){
       sources {
            cpp {
              source {
                  srcDirs "src/crc16/c"
                  include "**/*.c"
              }
              exportedHeaders {
                  srcDirs "src/crc16/headers"
              }
          }
        }
     }
     framingpp(NativeLibrarySpec) {
       sources {
            cpp {
              source {
                  srcDirs "src/framing/c"
                  include "**/*.c"
              }
              exportedHeaders {
                  srcDirs "src/framing/headers"
              }
          }
        }
     }
     telemetrypp(NativeLibrarySpec) {
       binaries.all {
         lib library: "crc16pp"
         lib library: "framingpp"
       }
       sources {
            cpp {
              source {
                  srcDirs "src/telemetry/c"
                  include "**/*.c"
              }
              exportedHeaders {
                  srcDirs "src/telemetry/headers"
              }
          }
        }
     }
     testspp(NativeExecutableSpec) {
        binaries.all {
          lib library: "telemetrypp"
          lib library: "crc16pp"
          lib library: "framingpp"
        }
        sources {
          cpp {
            source {
               srcDirs "src/tests/c"
               include "**/*.c"
            }
            exportedHeaders {
               srcDirs "src/tests/headers"
            }
          }
       }
    }

    /*
     THE test vector generator. Whatever comes out of it is the reference.
     It uses directly the original C-api in a native form to generate the test
     vectors.
     It generates a set of correct and incorrect vectors.
     Distributions are tested against both of thoses and must decode all
     corrects vectors and discard all incorrects.
    */

    testVectorsGenerator(NativeExecutableSpec) {
      binaries.all {
        lib library: "telemetry"
        lib library: "crc16"
        lib library: "framing"
      }
    }

    /* The following libraries are exclusively for compiling and testing Mbed distribution */

    bufferedSerialMock(NativeLibrarySpec) {
      sources {
        cpp {
          source {
             srcDirs "mocks/cpp/bufferedserial/"
             include "BufferedSerial.c"
          }
          exportedHeaders {
            srcDirs "mocks/cpp/bufferedserial/"
            include "BufferedSerial.h"
          }
        }
      }
    }

    mbedDistribution(NativeLibrarySpec) {
      binaries.all {
        lib library: "bufferedSerialMock"
      }
      sources {
        cpp {
          source {
             srcDirs "dist/mbed/"
             include "**/*.c", "**/*.cpp"
          }
          exportedHeaders {
            srcDirs "dist/mbed/"
            include "**/*.h", "**/*.hpp"
          }
        }
      }
    }

    mbedTest(NativeExecutableSpec) {
      binaries.all {
        lib library: "bufferedSerialMock"
        lib library: "mbedDistribution"
      }
      sources {
        cpp {
          source {
             srcDirs "integration_tests/cpp/mbed/"
             include "**/*.cpp"
          }
          exportedHeaders {
            srcDirs "integration_tests/cpp/mbed/"
            include "**/*.hpp"
          }
        }
      }
    }

    /* The following libraries are exclusively for compiling and testing Arduino distribution */
    hardwareSerialMock(NativeLibrarySpec) {
      sources {
        cpp {
          source {
             srcDirs "mocks/cpp/hardwareserial/"
             include "HardwareSerial.cpp"
          }
          exportedHeaders {
            srcDirs "mocks/cpp/hardwareserial/"
            include "HardwareSerial.h"
          }
        }
      }
    }

    arduinoDistribution(NativeLibrarySpec) {
      binaries.all {
        lib library: "hardwareSerialMock"
      }
      sources {
        cpp {
          source {
             srcDirs "dist/arduino/"
             include "**/*.c", "**/*.cpp"
          }
          exportedHeaders {
            srcDirs "dist/arduino/"
            include "**/*.h", "**/*.hpp"
          }
        }
      }
    }

    arduinoTest(NativeExecutableSpec) {
      binaries.all {
        lib library: "hardwareSerialMock"
        lib library: "arduinoDistribution"
      }
      sources {
        cpp {
          source {
             srcDirs "integration_tests/cpp/mbed/"
             include "**/*.cpp"
          }
          exportedHeaders {
            srcDirs "integration_tests/cpp/mbed/"
            include "**/*.hpp"
          }
        }
      }
    }


  }
}
